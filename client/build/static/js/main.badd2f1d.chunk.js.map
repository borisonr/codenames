{"version":3,"sources":["Home.js","Card.js","Game.js","Room.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","roomName","setRoomName","history","useHistory","className","alt","src","placeholder","type","value","onChange","e","target","onClick","room","push","Card","card","spymaster","guessWord","gameOver","wordClassName","category","cardClassName","guessed","key","word","disabled","href","review_html","rel","content_url","Game","board","role","socket","console","log","map","i","Math","random","index","emit","Room","window","location","pathname","slice","setRole","winner","setWinner","setGameOver","setBoard","score","setScore","undefined","setSocket","startingTeam","currentTurn","setCurrentTurn","useEffect","socketIOClient","on","disconnect","length","toUpperCase","pink","teal","name","checked","id","htmlFor","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.badd2f1d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./App.css\";\n\nconst Home = () => {\n  const [roomName, setRoomName] = useState(\"\");\n  const history = useHistory();\n  const createRoom = (room) => {\n    history.push(room);\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img\n          className=\"App-logo\"\n          alt=\"app logo\"\n          src=\"https://raw.githubusercontent.com/borisonr/codenames/main/client/src/logo_w.png\"\n        />\n        <p className=\"noMargin\">\n          Play Codenames online across multiple devices.\n        </p>\n        <p>\n          To create a new game or join an existing game, enter a Room Name and\n          click 'START'.\n        </p>\n        <form>\n          <input\n            placeholder=\"Room Name\"\n            type=\"text\"\n            value={roomName}\n            className=\"input\"\n            onChange={(e) => setRoomName(e.target.value)}\n          />\n          <button className=\"homeButton\" onClick={() => createRoom(roomName)}>\n            START\n          </button>\n        </form>\n      </header>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Card = ({ card, spymaster, guessWord, gameOver }) => {\n  const wordClassName = spymaster ? card.category : \"\";\n  let cardClassName =\n    card.guessed || gameOver ? `${card.category}-card` : \"card\";\n  if (spymaster && card.category === \"bomb\") cardClassName = \"bomb-card\";\n  return (\n    <button\n      key={card.word}\n      onClick={guessWord}\n      className={cardClassName}\n      disabled={gameOver || spymaster}\n    >\n      <p className={wordClassName}>{card.word}</p>\n      {gameOver && (\n        <>\n          <a\n            href={card.review_html}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"link\"\n          >\n            Review Card\n          </a>\n          <br />\n          <a\n            href={card.content_url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"link\"\n          >\n            Full Lesson\n          </a>\n        </>\n      )}\n    </button>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"./App.css\";\n\nconst Game = ({ board, role, socket, room, gameOver }) => {\n  const guessWord = (index) => {\n    socket.emit(\"guessWord\", index, room);\n  };\n  console.log(board);\n  return (\n    <div className=\"board\">\n      {board.map((card, i) => (\n        <Card\n          key={card.word + Math.random()}\n          card={card}\n          spymaster={role === \"spymaster\"}\n          guessWord={() => guessWord(i)}\n          gameOver={gameOver}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Game;\n","import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport \"./App.css\";\nimport Game from \"./Game\";\nconst ENDPOINT = \"http://127.0.0.1:4001\";\n\nconst Room = () => {\n  const room = window.location.pathname.slice(1);\n  const [role, setRole] = useState(\"player\");\n  const [winner, setWinner] = useState(\"\");\n  const [gameOver, setGameOver] = useState(false);\n  const [board, setBoard] = useState([]);\n  const [score, setScore] = useState({});\n  const [socket, setSocket] = useState(undefined);\n  const [currentTurn, setCurrentTurn] = useState(score.startingTeam);\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    setSocket(socket);\n    socket.emit(\"joinRoom\", room);\n    socket.on(\"newPlayer\", ({ board, currentTurn, score, winner }) => {\n      setBoard(board);\n      setScore(score);\n      setCurrentTurn(currentTurn);\n      setGameOver(!!winner);\n      setWinner(winner);\n    });\n\n    socket.on(\"newGame\", ({ board, currentTurn, score, winner }) => {\n      setBoard(board);\n      setScore(score);\n      setCurrentTurn(currentTurn);\n      setGameOver(false);\n      setWinner(winner);\n    });\n    socket.on(\"newTurn\", ({ currentTurn }) => {\n      setCurrentTurn(currentTurn);\n    });\n    socket.on(\"wordGuessed\", ({ board, currentTurn, score }) => {\n      setScore(score);\n      setBoard(board);\n      setCurrentTurn(currentTurn);\n    });\n\n    socket.on(\"gameOver\", ({ board, score, winner }) => {\n      setGameOver(true);\n      setWinner(winner);\n      setBoard(board);\n      setScore(score);\n    });\n    return () => socket.disconnect();\n  }, [room, winner]);\n\n  const endTurn = () => {\n    socket.emit(\"endTurn\", room);\n  };\n\n  const startNewGame = () => {\n    socket.emit(\"newGame\", room);\n  };\n\n  return board.length ? (\n    <div className=\"App\">\n      <img\n        src=\"https://raw.githubusercontent.com/borisonr/codenames/main/client/src/logo_w.png\"\n        alt=\"app logo\"\n        className=\"roomLogo\"\n      />\n      {gameOver ? (\n        <>\n          <p className={currentTurn}>GAME OVER</p>\n          <p className={currentTurn}>{winner?.toUpperCase()} WINS</p>\n          <p>\n            Learn more about these terms on Codecademy by clicking on the cards'\n            links\n          </p>\n        </>\n      ) : (\n        <>\n          <p className={currentTurn}>{currentTurn?.toUpperCase()}'S TURN</p>\n          <button className=\"bigbutton\" onClick={endTurn}>\n            End {currentTurn}'s turn\n          </button>\n        </>\n      )}\n      <div className=\"scoreContainer\">\n        <p>\n          SCORE: <span className=\"pink\">{score.pink}</span>-\n          <span className=\"teal\">{score.teal}</span>\n        </p>\n      </div>\n      <Game\n        board={board}\n        role={role}\n        socket={socket}\n        room={room}\n        gameOver={gameOver}\n      />\n      <div className=\"boardFooter\">\n        <div>\n          <input\n            name=\"player\"\n            checked={role === \"player\"}\n            id=\"player\"\n            onChange={() => setRole(\"player\")}\n            type=\"radio\"\n            disabled={gameOver}\n          />\n          <label htmlFor=\"player\">Player</label>\n          <input\n            type=\"radio\"\n            name=\"spymaster\"\n            checked={role === \"spymaster\"}\n            id=\"spymaster\"\n            onChange={() => setRole(\"spymaster\")}\n            disabled={gameOver}\n          />\n          <label htmlFor=\"spymaster\">Spymaster</label>\n        </div>\n        <button className=\"bigbutton\" onClick={startNewGame}>\n          New Game\n        </button>\n      </div>\n      <p className=\"noMargin\">Send this link to friends:</p>\n      <p className=\"noMargin\">{window.location.href}</p>\n    </div>\n  ) : null;\n};\n\nexport default Room;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport Room from \"./Room\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:room\">\n          <Room />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considepink localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}